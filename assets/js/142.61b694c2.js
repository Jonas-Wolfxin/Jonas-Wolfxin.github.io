(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{737:function(t,e,i){"use strict";i.r(e);var o=i(14),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"virtual-routing-and-forwarding"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#virtual-routing-and-forwarding"}},[t._v("#")]),t._v(" Virtual Routing and Forwarding")]),t._v(" "),i("blockquote",[i("p",[t._v("VRF allows us to "),i("strong",[t._v("divide one physical router into multiple virtual routers")]),t._v(".")])]),t._v(" "),i("h2",{attrs:{id:"intro-to-vrf"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#intro-to-vrf"}},[t._v("#")]),t._v(" Intro to VRF")]),t._v(" "),i("img",{staticStyle:{zoom:"38%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162054885.png",alt:"image-20230516205452807"}}),t._v(" "),i("blockquote",[i("p",[t._v("The diagram above gives an idea of how VRFs work. The black box in the middle represents R1, a single physical router. The blue, green, and red router icons inside represent three virtual routers inside R1, three VRFs. Let’s call them VRF1, VRF2, and VRF3.")]),t._v(" "),i("ul",[i("li",[t._v("Virtual Routing and Forwarding is used to divide "),i("em",[t._v("a single router")]),t._v(" into "),i("em",[t._v("multiple virtual routers")]),t._v(".\n"),i("ul",[i("li",[t._v("VLANs divide a switch into multiple virtual switches each with their own "),i("strong",[t._v("broadcast domain")]),t._v(",")]),t._v(" "),i("li",[t._v("VRF divides a router into multiple virtual routers each with their own "),i("strong",[t._v("routing table")]),t._v(".")])])]),t._v(" "),i("li",[t._v("It does this by allowing a router to build multiple separate routing tables.\n"),i("ul",[i("li",[t._v("Normally a router has one routing table, but with VRF it has multiple.")]),t._v(" "),i("li",[t._v("Interfaces (Layer 3 only) & routes are configured to be in a specific VRF (aka VRF Instance). "),i("strong",[t._v("Router interfaces")]),t._v(", "),i("strong",[t._v("SVIs & routed ports on multilayer switches")]),t._v(" can be configured in a VRF.")])])]),t._v(" "),i("li",[t._v("Traffic in one VRF cannot be forwarded out of an interface in another VRF.\n"),i("ul",[i("li",[t._v("As an exception, "),i("strong",[t._v("VRF Leaking")]),t._v(" can be configured to allow traffic to pass between VRF’s.")])])]),t._v(" "),i("li",[t._v("VRF is commonly used to f"),i("strong",[t._v("acilitate MPLS(multi-protocol label switching)")]),t._v(".\n"),i("ul",[i("li",[t._v("However, the kind of VRF we are talking about here is "),i("strong",[t._v("VRF-lite")]),t._v("(VRF without MPLS).")])])]),t._v(" "),i("li",[t._v("VRF is commonly used by service providers to "),i("strong",[t._v("allow one device to carry traffic from multiple customers")]),t._v(".\n"),i("ul",[i("li",[i("strong",[t._v("Each customer’s traffic is isolated from the others")]),t._v(", because each customer connects to their own virtual router within the service provider’s physical router.")]),t._v(" "),i("li",[i("strong",[t._v("Customer IP addresses can overlap without issues.")])])])])]),t._v(" "),i("img",{staticStyle:{zoom:"43%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162107963.png",alt:"image-20230516210733870"}})]),t._v(" "),i("h2",{attrs:{id:"vrf-configuration"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#vrf-configuration"}},[t._v("#")]),t._v(" VRF Configuration")]),t._v(" "),i("img",{staticStyle:{zoom:"43%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162108269.png",alt:"image-20230516210822176"}}),t._v(" "),i("blockquote",[i("ul",[i("li",[t._v("SPR1 is a service provider router providing WAN services to two customers, Customer 1 and Customer 2.")]),t._v(" "),i("li",[t._v("C1R1 and C1R2 belong to Customer 1 and C2R1 and C2R2 belong to customer 2.")]),t._v(" "),i("li",[t._v("Both Customer 1 and Customer 2 use subnet 192.168.1.0/30.")])])]),t._v(" "),i("h5",{attrs:{id:"demo-configuration-without-vrf"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#demo-configuration-without-vrf"}},[t._v("#")]),t._v(" Demo Configuration without VRF")]),t._v(" "),i("img",{staticStyle:{zoom:"47%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162111562.png",alt:"image-20230516211135330"}}),t._v(" "),i("h5",{attrs:{id:"next-let-s-use-vrf-to-configure-this-network-properly"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#next-let-s-use-vrf-to-configure-this-network-properly"}},[t._v("#")]),t._v(" Next let’s use VRF to configure this network properly.")]),t._v(" "),i("blockquote",[i("img",{staticStyle:{zoom:"38%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162117913.png",alt:"image-20230516211748546"}}),t._v(" "),i("ol",[i("li",[t._v("First we have to create the VRFs, which can be done in global config mode with the command "),i("code",[t._v("ip vrf VRF_Name")]),t._v(";")]),t._v(" "),i("li",[t._v("The next step is to assign interfaces to each VRF. From "),i("em",[t._v("interface config mode")]),t._v(", use the command "),i("code",[t._v("ip vrf forwarding VRF_Name")]),t._v(".")]),t._v(" "),i("li",[t._v("Re-configure the IP address on the interfaces and enable the interfaces;")])])]),t._v(" "),i("h6",{attrs:{id:"check"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[t._v("#")]),t._v(" check")]),t._v(" "),i("img",{staticStyle:{zoom:"39%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162120052.png",alt:"image-20230516212025676"}}),t._v(" "),i("img",{staticStyle:{zoom:"39%"},attrs:{src:"https://cdn.jsdelivr.net/gh/Jonas-Wolfxin/MyPicgo/img/202305162122986.png",alt:"image-20230516212208538"}})])}),[],!1,null,null,null);e.default=r.exports}}]);